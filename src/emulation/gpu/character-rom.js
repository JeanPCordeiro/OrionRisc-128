/**
 * Character ROM - 8x8 pixel character definitions for OrionRisc-128 GPU
 *
 * Provides complete ASCII character set (0-255) with 8x8 pixel bitmap
 * definitions for text mode rendering and character display.
 */

class CharacterROM {
    constructor() {
        this.CHAR_WIDTH = 8;
        this.CHAR_HEIGHT = 8;
        this.CHARS_PER_ROW = 32; // Characters per row in font data

        // Character set data - 8x8 bitmaps for ASCII characters 0-255
        // Each character is represented as 8 bytes (8 rows of 8 pixels)
        this.fontData = this.generateFontData();

        // Character attributes
        this.attributes = {
            NORMAL: 0x00,
            BOLD: 0x01,
            REVERSE: 0x02,
            UNDERLINE: 0x04,
            BLINK: 0x08
        };
    }

    /**
     * Generate 8x8 font data for ASCII characters 0-255
     * @returns {Uint8Array} Font bitmap data
     */
    generateFontData() {
        const fontData = new Uint8Array(256 * 8); // 256 chars * 8 bytes per char

        // ASCII 0-31 (Control characters) - mostly empty
        for (let char = 0; char < 32; char++) {
            this.setCharacterData(fontData, char, this.getControlCharacterBitmap(char));
        }

        // ASCII 32-126 (Printable characters)
        this.setCharacterData(fontData, 32, this.getSpaceBitmap()); // Space
        this.setCharacterData(fontData, 33, this.getExclamationBitmap()); // !
        this.setCharacterData(fontData, 34, this.getQuoteBitmap()); // "
        this.setCharacterData(fontData, 35, this.getHashBitmap()); // #
        this.setCharacterData(fontData, 36, this.getDollarBitmap()); // $
        this.setCharacterData(fontData, 37, this.getPercentBitmap()); // %
        this.setCharacterData(fontData, 38, this.getAmpersandBitmap()); // &
        this.setCharacterData(fontData, 39, this.getApostropheBitmap()); // '
        this.setCharacterData(fontData, 40, this.getLeftParenBitmap()); // (
        this.setCharacterData(fontData, 41, this.getRightParenBitmap()); // )
        this.setCharacterData(fontData, 42, this.getAsteriskBitmap()); // *
        this.setCharacterData(fontData, 43, this.getPlusBitmap()); // +
        this.setCharacterData(fontData, 44, this.getCommaBitmap()); // ,
        this.setCharacterData(fontData, 45, this.getMinusBitmap()); // -
        this.setCharacterData(fontData, 46, this.getPeriodBitmap()); // .
        this.setCharacterData(fontData, 47, this.getSlashBitmap()); // /

        // Numbers 0-9
        for (let i = 0; i < 10; i++) {
            this.setCharacterData(fontData, 48 + i, this.getNumberBitmap(i));
        }

        // Colon and semicolon
        this.setCharacterData(fontData, 58, this.getColonBitmap()); // :
        this.setCharacterData(fontData, 59, this.getSemicolonBitmap()); // ;

        // Comparison and arithmetic operators
        this.setCharacterData(fontData, 60, this.getLessThanBitmap()); // <
        this.setCharacterData(fontData, 61, this.getEqualsBitmap()); // =
        this.setCharacterData(fontData, 62, this.getGreaterThanBitmap()); // >
        this.setCharacterData(fontData, 63, this.getQuestionBitmap()); // ?
        this.setCharacterData(fontData, 64, this.getAtBitmap()); // @

        // Uppercase letters A-Z
        for (let i = 0; i < 26; i++) {
            this.setCharacterData(fontData, 65 + i, this.getLetterBitmap(String.fromCharCode(65 + i)));
        }

        // Bracket characters
        this.setCharacterData(fontData, 91, this.getLeftBracketBitmap()); // [
        this.setCharacterData(fontData, 92, this.getBackslashBitmap()); // \
        this.setCharacterData(fontData, 93, this.getRightBracketBitmap()); // ]
        this.setCharacterData(fontData, 94, this.getCaretBitmap()); // ^
        this.setCharacterData(fontData, 95, this.getUnderscoreBitmap()); // _
        this.setCharacterData(fontData, 96, this.getBacktickBitmap()); // `

        // Lowercase letters a-z
        for (let i = 0; i < 26; i++) {
            this.setCharacterData(fontData, 97 + i, this.getLowerLetterBitmap(String.fromCharCode(97 + i)));
        }

        // Curly braces and pipe
        this.setCharacterData(fontData, 123, this.getLeftBraceBitmap()); // {
        this.setCharacterData(fontData, 124, this.getPipeBitmap()); // |
        this.setCharacterData(fontData, 125, this.getRightBraceBitmap()); // }
        this.setCharacterData(fontData, 126, this.getTildeBitmap()); // ~

        // ASCII 127 (DEL) - block character
        this.setCharacterData(fontData, 127, this.getBlockBitmap());

        // ASCII 128-255 (Extended characters) - graphics and international
        for (let char = 128; char < 256; char++) {
            this.setCharacterData(fontData, char, this.getExtendedCharacterBitmap(char));
        }

        return fontData;
    }

    /**
     * Set character bitmap data in font array
     * @param {Uint8Array} fontData - Font data array
     * @param {number} charCode - Character code
     * @param {number[]} bitmap - 8-byte bitmap array
     */
    setCharacterData(fontData, charCode, bitmap) {
        const offset = charCode * 8;
        for (let i = 0; i < 8; i++) {
            fontData[offset + i] = bitmap[i] || 0;
        }
    }

    /**
     * Get bitmap for a specific character
     * @param {number} charCode - Character code (0-255)
     * @returns {Uint8Array} 8-byte character bitmap
     */
    getCharacterBitmap(charCode) {
        const offset = charCode * 8;
        return new Uint8Array([
            this.fontData[offset],
            this.fontData[offset + 1],
            this.fontData[offset + 2],
            this.fontData[offset + 3],
            this.fontData[offset + 4],
            this.fontData[offset + 5],
            this.fontData[offset + 6],
            this.fontData[offset + 7]
        ]);
    }

    /**
     * Render a character to a frame buffer at specified position
     * @param {Object} frameBuffer - Frame buffer object with setPixel method
     * @param {number} x - X position (top-left corner)
     * @param {number} y - Y position (top-left corner)
     * @param {number} charCode - Character code (0-255)
     * @param {boolean} foreground - Foreground color (true = lit)
     * @param {boolean} background - Background color (true = lit)
     * @param {number} attributes - Character attributes
     */
    renderCharacter(frameBuffer, x, y, charCode, foreground, background, attributes = 0) {
        const bitmap = this.getCharacterBitmap(charCode);

        for (let row = 0; row < 8; row++) {
            for (let col = 0; col < 8; col++) {
                const bit = 7 - col; // MSB first
                const pixel = (bitmap[row] & (1 << bit)) !== 0;

                let finalPixel = pixel;

                // Apply attributes
                if (attributes & this.attributes.REVERSE) {
                    finalPixel = !finalPixel;
                }

                // Choose color based on pixel state
                const color = finalPixel ? foreground : background;

                frameBuffer.setPixel(x + col, y + row, color);
            }
        }

        // Draw underline if specified
        if (attributes & this.attributes.UNDERLINE) {
            for (let col = 0; col < 8; col++) {
                frameBuffer.setPixel(x + col, y + 7, foreground);
            }
        }
    }

    // Character bitmap definitions (simplified for brevity)
    getSpaceBitmap() { return [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]; }
    getExclamationBitmap() { return [0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18]; }
    getQuoteBitmap() { return [0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00]; }
    getHashBitmap() { return [0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00]; }
    getDollarBitmap() { return [0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00]; }
    getPercentBitmap() { return [0x00, 0x66, 0x36, 0x18, 0x0C, 0x66, 0x00, 0x00]; }
    getAmpersandBitmap() { return [0x38, 0x6C, 0x38, 0x6C, 0x76, 0xDC, 0xCC, 0x76]; }
    getApostropheBitmap() { return [0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00]; }
    getLeftParenBitmap() { return [0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00]; }
    getRightParenBitmap() { return [0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00]; }
    getAsteriskBitmap() { return [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00]; }
    getPlusBitmap() { return [0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00]; }
    getCommaBitmap() { return [0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00]; }
    getMinusBitmap() { return [0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00]; }
    getPeriodBitmap() { return [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00]; }
    getSlashBitmap() { return [0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00]; }

    getNumberBitmap(num) {
        const numbers = [
            [0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00], // 0
            [0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7E, 0x00], // 1
            [0x3C, 0x66, 0x06, 0x0C, 0x30, 0x60, 0x7E, 0x00], // 2
            [0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00], // 3
            [0x0C, 0x1C, 0x2C, 0x4C, 0x7E, 0x0C, 0x0C, 0x00], // 4
            [0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00], // 5
            [0x1C, 0x30, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00], // 6
            [0x7E, 0x66, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x00], // 7
            [0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00], // 8
            [0x3C, 0x66, 0x66, 0x3E, 0x06, 0x0C, 0x38, 0x00]  // 9
        ];
        return numbers[num] || numbers[0];
    }

    getColonBitmap() { return [0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00]; }
    getSemicolonBitmap() { return [0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 0x00]; }
    getLessThanBitmap() { return [0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00]; }
    getEqualsBitmap() { return [0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00]; }
    getGreaterThanBitmap() { return [0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00]; }
    getQuestionBitmap() { return [0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00]; }
    getAtBitmap() { return [0x3C, 0x42, 0x99, 0xA5, 0xA5, 0x9F, 0x42, 0x3C]; }

    getLetterBitmap(letter) {
        const letters = {
            'A': [0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00],
            'B': [0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00],
            'C': [0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00],
            'D': [0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00],
            'E': [0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00],
            'F': [0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00],
            'G': [0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00],
            'H': [0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00],
            'I': [0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00],
            'J': [0x3E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00],
            'K': [0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00],
            'L': [0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00],
            'M': [0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0x00],
            'N': [0x66, 0x76, 0x7E, 0x6E, 0x66, 0x66, 0x66, 0x00],
            'O': [0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
            'P': [0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00],
            'Q': [0x3C, 0x66, 0x66, 0x66, 0x6A, 0x6C, 0x36, 0x00],
            'R': [0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00],
            'S': [0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00],
            'T': [0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00],
            'U': [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
            'V': [0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00],
            'W': [0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00],
            'X': [0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00],
            'Y': [0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00],
            'Z': [0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00]
        };
        return letters[letter] || [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    }

    getLowerLetterBitmap(letter) {
        const letters = {
            'a': [0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00],
            'b': [0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00],
            'c': [0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x00],
            'd': [0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00],
            'e': [0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00],
            'f': [0x1C, 0x30, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x00],
            'g': [0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x3C],
            'h': [0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00],
            'i': [0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00],
            'j': [0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0x6C, 0x38, 0x00],
            'k': [0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00],
            'l': [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00],
            'm': [0x00, 0x00, 0x6C, 0xFE, 0xD6, 0xC6, 0xC6, 0x00],
            'n': [0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00],
            'o': [0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00],
            'p': [0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60],
            'q': [0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06],
            'r': [0x00, 0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x00],
            's': [0x00, 0x00, 0x3C, 0x60, 0x3C, 0x06, 0x7C, 0x00],
            't': [0x30, 0x30, 0x7C, 0x30, 0x30, 0x30, 0x1C, 0x00],
            'u': [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00],
            'v': [0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00],
            'w': [0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00],
            'x': [0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00],
            'y': [0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x3C],
            'z': [0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00]
        };
        return letters[letter] || [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    }

    getControlCharacterBitmap(char) {
        // Simple pattern for control characters
        return [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    }

    getBlockBitmap() { return [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]; }

    getExtendedCharacterBitmap(char) {
        // Graphics characters and international characters
        const extended = {
            128: [0x3C, 0x42, 0x99, 0xA1, 0xA1, 0x99, 0x42, 0x3C], // Ç
            129: [0x3C, 0x42, 0x81, 0x81, 0x81, 0x99, 0x42, 0x3C], // ü
            130: [0x3C, 0x42, 0x81, 0x91, 0x91, 0x81, 0x42, 0x3C], // é
            131: [0x3C, 0x42, 0x81, 0x89, 0x89, 0x81, 0x42, 0x3C], // â
            132: [0x3C, 0x42, 0x81, 0x85, 0x85, 0x81, 0x42, 0x3C], // ä
            133: [0x3C, 0x42, 0x81, 0x83, 0x83, 0x81, 0x42, 0x3C], // à
            134: [0x3C, 0x42, 0x81, 0x87, 0x87, 0x81, 0x42, 0x3C], // å
            135: [0x3C, 0x42, 0x81, 0x8F, 0x8F, 0x81, 0x42, 0x3C], // ç
            136: [0x3C, 0x42, 0x81, 0x9D, 0x9D, 0x81, 0x42, 0x3C], // ê
            137: [0x3C, 0x42, 0x81, 0x99, 0x99, 0x81, 0x42, 0x3C], // ë
            138: [0x3C, 0x42, 0x81, 0x93, 0x93, 0x81, 0x42, 0x3C], // è
            139: [0x3C, 0x42, 0x81, 0x97, 0x97, 0x81, 0x42, 0x3C], // ï
            140: [0x3C, 0x42, 0x81, 0x91, 0x91, 0x81, 0x42, 0x3C], // î
            141: [0x3C, 0x42, 0x81, 0x8D, 0x8D, 0x81, 0x42, 0x3C], // ì
            142: [0x3C, 0x42, 0x81, 0x8B, 0x8B, 0x81, 0x42, 0x3C], // Ä
            143: [0x3C, 0x42, 0x81, 0x87, 0x87, 0x81, 0x42, 0x3C], // Å
            144: [0x3C, 0x42, 0x81, 0x85, 0x85, 0x81, 0x42, 0x3C], // É
            145: [0x3C, 0x42, 0x81, 0x83, 0x83, 0x81, 0x42, 0x3C], // æ
            146: [0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C], // Æ
            147: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ô
            148: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ö
            149: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ò
            150: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // û
            151: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ù
            152: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ÿ
            153: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // Ö
            154: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // Ü
            155: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ¢
            156: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // £
            157: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ¥
            158: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ₧
            159: [0x3C, 0x42, 0x81, 0x80, 0x80, 0x81, 0x42, 0x3C], // ƒ
        };

        return extended[char] || [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    }

    // Additional bitmap methods for remaining characters
    getLeftBracketBitmap() { return [0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00]; }
    getBackslashBitmap() { return [0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00]; }
    getRightBracketBitmap() { return [0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00]; }
    getCaretBitmap() { return [0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00]; }
    getUnderscoreBitmap() { return [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF]; }
    getBacktickBitmap() { return [0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00]; }
    getLeftBraceBitmap() { return [0x1C, 0x30, 0x30, 0x60, 0x30, 0x30, 0x1C, 0x00]; }
    getPipeBitmap() { return [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18]; }
    getRightBraceBitmap() { return [0x38, 0x0C, 0x0C, 0x06, 0x0C, 0x0C, 0x38, 0x00]; }
    getTildeBitmap() { return [0x00, 0x00, 0x6C, 0x92, 0x00, 0x00, 0x00, 0x00]; }
}

module.exports = CharacterROM;